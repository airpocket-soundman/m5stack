{"category":"graphEditor","color":"#ff00ea","blocks":["__graphEditor_classDeclaration","__graphEditor_initGraph","__graphEditor_setGraphArea","__graphEditor_setScale","__graphEditor_setLineColor","__graphEditor_setBgColor","__graphEditor_setFrameColor","__graphEditor_drawFrame","__graphEditor_updateData","__graphEditor_drawLineGraph","__graphEditor_dataNum"],"jscode":"// Block __graphEditor_classDeclaration\nvar __graphEditor_classDeclaration_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"classDeclaration\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_classDeclaration'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_classDeclaration_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_classDeclaration'] = function(block) {\n        return `class graph():\n  autoScaleX   = 1\n  autoScaleY   = 1\n\n  width        = 320\n  hight        = 240\n\n  dataMax      = 1000\n  dataMin      = 0\n  dataRange    = dataMax - dataMin\n  xMax         = width -1\n  xMin         = 0\n  xOffset      = 0\n  yMax         = hight -1\n  yMin         = 0\n  yOffset      = 0\n  yRange       = yMax - yMin\n  lineColor    = 0x00FF00\n  bgColor      = 0x0000FF\n  frameColor   = 0xFF0000\n  dataNum      = xMax\n  sourceData   = [0] * (xMax)\n  xOffset      = 0\n  yOffset      = 0\n  \n\n  def __init__(self):\n    self.width = 320\n    \n#update source data\n  def updateSourceData(self, data):\n    self.sourceData.append(data)\n    self.sourceData.pop(0)\n    \n#set graph area\n  def graphArea(self, drawAreaWidth, drawAreaHight, drawAreaXOffset, drawAreaYOffset):\n    self.xMax       = drawAreaWidth - 1\n    self.yMax       = drawAreaHight - 1\n    self.xOffset    = drawAreaXOffset\n    self.yOffset    = drawAreaYOffset\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n    \n#graph scale\n  def graphScale(self, setAutoScaleX, setDataNum, setAutoScaleY, setDataMax, setDataMin):\n    self.autoScaleX = setAutoScaleX\n    self.dataNum    = setDataNum\n    self.autoScaleY = setAutoScaleY\n    self.dataMax    = setDataMax\n    self.dataMin    = setDataMin\n    self.dataRange     = self.dataMax - self.dataMin\n    \n#draw Frame\n  def drawFrame(self):\n    lcd.rect(self.xMin + self.xOffset, \n             self.hight - (self.yMin + self.yOffset) - self.yMax - 1, \n             self.xMax + 1 - self.xMin, \n             self.yMax + 1 - self.yMin, \n             color = self.frameColor)\n    self.xMax       -= 1\n    self.yMax       -= 2\n    self.xOffset    += 1\n    self.yOffset    += 2\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n\n#drawLine\n  def drawLine(self):\n    if self.autoScaleY == 1:\n      if max(self.sourceData) - min(self.sourceData) != 0:\n        self.dataMax = max(self.sourceData) + ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataMin = min(self.sourceData) - ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataRange = self.dataMax - self.dataMin\n\n    for i in range(len(self.sourceData)-1):\n      x1 = i + self.xOffset\n      y1 = round(self.hight - (self.sourceData[i] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y1 < self.hight - self.yRange - self.yOffset:\n        y1 = self.hight - self.yRange - self.yOffset\n      elif y1 > self.hight - self.yOffset:\n        y1 = self.hight - 1 - self.yOffset\n      x2 = i + 1 + self.xOffset\n      y2 = round(self.hight - (self.sourceData[i+1] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y2 < self.hight - self.yRange - self.yOffset:\n        y2 = self.hight - self.yRange - self.yOffset\n      elif y2 > self.hight - self.yOffset:\n        y2 = self.hight - 1 - self.yOffset\n\n      if i == 0:\n        lcd.line(x1, self.hight - self.yMax - self.yOffset, x1, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x2, self.hight - self.yMax - self.yOffset, x2, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x1, y1, x2, y2, self.lineColor)\n` + \"\\n\";\n};\n\n// Block __graphEditor_initGraph\nvar __graphEditor_initGraph_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"initGraph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"initGraph\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_initGraph'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_initGraph_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_initGraph'] = function(block) {\n    var initGraph = Blockly.Python.valueToCode(block, 'initGraph', Blockly.Python.ORDER_NONE);\n    return `${initGraph} =  graph()` + \"\\n\";\n};\n\n// Block __graphEditor_setGraphArea\nvar __graphEditor_setGraphArea_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setGraphArea\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setGraphArea\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"width\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hight\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"hight\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"xOffset\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"xOffset\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"yOffset\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"yOffset\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_setGraphArea'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_setGraphArea_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_setGraphArea'] = function(block) {\n    var setGraphArea = Blockly.Python.valueToCode(block, 'setGraphArea', Blockly.Python.ORDER_NONE);\nvar width = block.getFieldValue('width');\nvar hight = block.getFieldValue('hight');\nvar xOffset = block.getFieldValue('xOffset');\nvar yOffset = block.getFieldValue('yOffset');\n    return `${setGraphArea}.graphArea(${width}, ${hight}, ${xOffset}, ${yOffset})` + \"\\n\";\n};\n\n// Block __graphEditor_setScale\nvar __graphEditor_setScale_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setScale\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setScale\"\n        }\n    ],\n    \"message1\": \"%1\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"(autoScaleX)\"\n        }\n    ],\n    \"message2\": \"%1\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"(dataNum)\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"autoScaleY\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"autoScaleY\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"maxYValue\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"maxYValue\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"minYValue\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"minYValue\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_setScale'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_setScale_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_setScale'] = function(block) {\n    var setScale = Blockly.Python.valueToCode(block, 'setScale', Blockly.Python.ORDER_NONE);\nvar autoScaleY = block.getFieldValue('autoScaleY');\nvar maxYValue = block.getFieldValue('maxYValue');\nvar minYValue = block.getFieldValue('minYValue');\n    return `${setScale}.graphScale(0,0,${autoScaleY}, ${maxYValue}, ${minYValue})\n` + \"\\n\";\n};\n\n// Block __graphEditor_setLineColor\nvar __graphEditor_setLineColor_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"graph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"graph\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setLinecolor\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"setLinecolor\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_setLineColor'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_setLineColor_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_setLineColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setLinecolor = block.getFieldValue('setLinecolor');\n    return `${graph}.lineColor = ${setLineColor}` + \"\\n\";\n};\n\n// Block __graphEditor_setBgColor\nvar __graphEditor_setBgColor_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"graph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"graph\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setBgColor\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"setBgColor\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_setBgColor'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_setBgColor_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_setBgColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setBgColor = block.getFieldValue('setBgColor');\n    return `${graph}.bgColor = ${setBgColor}` + \"\\n\";\n};\n\n// Block __graphEditor_setFrameColor\nvar __graphEditor_setFrameColor_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"graph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"graph\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setFrameColor\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"setFrameColor\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_setFrameColor'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_setFrameColor_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_setFrameColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setFrameColor = block.getFieldValue('setFrameColor');\n    return `${graph}.frameColor = ${setFrameColor}` + \"\\n\";\n};\n\n// Block __graphEditor_drawFrame\nvar __graphEditor_drawFrame_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"drawFrame\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"drawFrame\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_drawFrame'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_drawFrame_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_drawFrame'] = function(block) {\n    var drawFrame = Blockly.Python.valueToCode(block, 'drawFrame', Blockly.Python.ORDER_NONE);\n    return `${drawFrame}.drawFrame()` + \"\\n\";\n};\n\n// Block __graphEditor_updateData\nvar __graphEditor_updateData_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"graph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"graph\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"addData\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"addData\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_updateData'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_updateData_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_updateData'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar addData = Blockly.Python.valueToCode(block, 'addData', Blockly.Python.ORDER_NONE);\n    return `${graph}.updateSourceData(${addData})` + \"\\n\";\n};\n\n// Block __graphEditor_drawLineGraph\nvar __graphEditor_drawLineGraph_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"drawLineGraph\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"drawLineGraph\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_drawLineGraph'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_drawLineGraph_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_drawLineGraph'] = function(block) {\n    var drawLineGraph = Blockly.Python.valueToCode(block, 'drawLineGraph', Blockly.Python.ORDER_NONE);\n    return `${drawLineGraph}.drawLine()` + \"\\n\";\n};\n\n// Block __graphEditor_dataNum\nvar __graphEditor_dataNum_json = {\n    \"output\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"dataNum\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"dataNum\"\n        }\n    ],\n    \"colour\": \"#ff00ea\"\n};\n\nwindow['Blockly'].Blocks['__graphEditor_dataNum'] = {\n    init: function() {\n        this.jsonInit(__graphEditor_dataNum_json);\n    }\n};\n\nwindow['Blockly'].Python['__graphEditor_dataNum'] = function(block) {\n    var dataNum = Blockly.Python.valueToCode(block, 'dataNum', Blockly.Python.ORDER_NONE);\n    return [`${dataNum}.xMax`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"classDeclaration":["window['Blockly'].Python['__graphEditor_classDeclaration'] = function(block) {\n        return `class graph():\n  autoScaleX   = 1\n  autoScaleY   = 1\n\n  width        = 320\n  hight        = 240\n\n  dataMax      = 1000\n  dataMin      = 0\n  dataRange    = dataMax - dataMin\n  xMax         = width -1\n  xMin         = 0\n  xOffset      = 0\n  yMax         = hight -1\n  yMin         = 0\n  yOffset      = 0\n  yRange       = yMax - yMin\n  lineColor    = 0x00FF00\n  bgColor      = 0x0000FF\n  frameColor   = 0xFF0000\n  dataNum      = xMax\n  sourceData   = [0] * (xMax)\n  xOffset      = 0\n  yOffset      = 0\n  \n\n  def __init__(self):\n    self.width = 320\n    \n#update source data\n  def updateSourceData(self, data):\n    self.sourceData.append(data)\n    self.sourceData.pop(0)\n    \n#set graph area\n  def graphArea(self, drawAreaWidth, drawAreaHight, drawAreaXOffset, drawAreaYOffset):\n    self.xMax       = drawAreaWidth - 1\n    self.yMax       = drawAreaHight - 1\n    self.xOffset    = drawAreaXOffset\n    self.yOffset    = drawAreaYOffset\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n    \n#graph scale\n  def graphScale(self, setAutoScaleX, setDataNum, setAutoScaleY, setDataMax, setDataMin):\n    self.autoScaleX = setAutoScaleX\n    self.dataNum    = setDataNum\n    self.autoScaleY = setAutoScaleY\n    self.dataMax    = setDataMax\n    self.dataMin    = setDataMin\n    self.dataRange     = self.dataMax - self.dataMin\n    \n#draw Frame\n  def drawFrame(self):\n    lcd.rect(self.xMin + self.xOffset, \n             self.hight - (self.yMin + self.yOffset) - self.yMax - 1, \n             self.xMax + 1 - self.xMin, \n             self.yMax + 1 - self.yMin, \n             color = self.frameColor)\n    self.xMax       -= 1\n    self.yMax       -= 2\n    self.xOffset    += 1\n    self.yOffset    += 2\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n\n#drawLine\n  def drawLine(self):\n    if self.autoScaleY == 1:\n      if max(self.sourceData) - min(self.sourceData) != 0:\n        self.dataMax = max(self.sourceData) + ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataMin = min(self.sourceData) - ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataRange = self.dataMax - self.dataMin\n\n    for i in range(len(self.sourceData)-1):\n      x1 = i + self.xOffset\n      y1 = round(self.hight - (self.sourceData[i] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y1 < self.hight - self.yRange - self.yOffset:\n        y1 = self.hight - self.yRange - self.yOffset\n      elif y1 > self.hight - self.yOffset:\n        y1 = self.hight - 1 - self.yOffset\n      x2 = i + 1 + self.xOffset\n      y2 = round(self.hight - (self.sourceData[i+1] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y2 < self.hight - self.yRange - self.yOffset:\n        y2 = self.hight - self.yRange - self.yOffset\n      elif y2 > self.hight - self.yOffset:\n        y2 = self.hight - 1 - self.yOffset\n\n      if i == 0:\n        lcd.line(x1, self.hight - self.yMax - self.yOffset, x1, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x2, self.hight - self.yMax - self.yOffset, x2, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x1, y1, x2, y2, self.lineColor)\n` + \"\\n\";\n};\n\n","class graph():\n  autoScaleX   = 1\n  autoScaleY   = 1\n\n  width        = 320\n  hight        = 240\n\n  dataMax      = 1000\n  dataMin      = 0\n  dataRange    = dataMax - dataMin\n  xMax         = width -1\n  xMin         = 0\n  xOffset      = 0\n  yMax         = hight -1\n  yMin         = 0\n  yOffset      = 0\n  yRange       = yMax - yMin\n  lineColor    = 0x00FF00\n  bgColor      = 0x0000FF\n  frameColor   = 0xFF0000\n  dataNum      = xMax\n  sourceData   = [0] * (xMax)\n  xOffset      = 0\n  yOffset      = 0\n  \n\n  def __init__(self):\n    self.width = 320\n    \n#update source data\n  def updateSourceData(self, data):\n    self.sourceData.append(data)\n    self.sourceData.pop(0)\n    \n#set graph area\n  def graphArea(self, drawAreaWidth, drawAreaHight, drawAreaXOffset, drawAreaYOffset):\n    self.xMax       = drawAreaWidth - 1\n    self.yMax       = drawAreaHight - 1\n    self.xOffset    = drawAreaXOffset\n    self.yOffset    = drawAreaYOffset\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n    \n#graph scale\n  def graphScale(self, setAutoScaleX, setDataNum, setAutoScaleY, setDataMax, setDataMin):\n    self.autoScaleX = setAutoScaleX\n    self.dataNum    = setDataNum\n    self.autoScaleY = setAutoScaleY\n    self.dataMax    = setDataMax\n    self.dataMin    = setDataMin\n    self.dataRange     = self.dataMax - self.dataMin\n    \n#draw Frame\n  def drawFrame(self):\n    lcd.rect(self.xMin + self.xOffset, \n             self.hight - (self.yMin + self.yOffset) - self.yMax - 1, \n             self.xMax + 1 - self.xMin, \n             self.yMax + 1 - self.yMin, \n             color = self.frameColor)\n    self.xMax       -= 1\n    self.yMax       -= 2\n    self.xOffset    += 1\n    self.yOffset    += 2\n    self.yRange     = self.yMax - self.yMin\n    self.sourceData = [0] * (self.xMax)\n\n#drawLine\n  def drawLine(self):\n    if self.autoScaleY == 1:\n      if max(self.sourceData) - min(self.sourceData) != 0:\n        self.dataMax = max(self.sourceData) + ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataMin = min(self.sourceData) - ((max(self.sourceData) - min(self.sourceData)) * 0.1)\n        self.dataRange = self.dataMax - self.dataMin\n\n    for i in range(len(self.sourceData)-1):\n      x1 = i + self.xOffset\n      y1 = round(self.hight - (self.sourceData[i] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y1 < self.hight - self.yRange - self.yOffset:\n        y1 = self.hight - self.yRange - self.yOffset\n      elif y1 > self.hight - self.yOffset:\n        y1 = self.hight - 1 - self.yOffset\n      x2 = i + 1 + self.xOffset\n      y2 = round(self.hight - (self.sourceData[i+1] - self.dataMin) / self.dataRange * self.yRange - self.yOffset)\n      if y2 < self.hight - self.yRange - self.yOffset:\n        y2 = self.hight - self.yRange - self.yOffset\n      elif y2 > self.hight - self.yOffset:\n        y2 = self.hight - 1 - self.yOffset\n\n      if i == 0:\n        lcd.line(x1, self.hight - self.yMax - self.yOffset, x1, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x2, self.hight - self.yMax - self.yOffset, x2, self.hight - self.yMin - self.yOffset, self.bgColor)\n      lcd.line(x1, y1, x2, y2, self.lineColor)\n"],"initGraph":["window['Blockly'].Python['__graphEditor_initGraph'] = function(block) {\n    var initGraph = Blockly.Python.valueToCode(block, 'initGraph', Blockly.Python.ORDER_NONE);\n    return `${initGraph} =  graph()` + \"\\n\";\n};\n\n","${initGraph} =  graph()"],"setGraphArea":["window['Blockly'].Python['__graphEditor_setGraphArea'] = function(block) {\n    var setGraphArea = Blockly.Python.valueToCode(block, 'setGraphArea', Blockly.Python.ORDER_NONE);\nvar width = block.getFieldValue('width');\nvar hight = block.getFieldValue('hight');\nvar xOffset = block.getFieldValue('xOffset');\nvar yOffset = block.getFieldValue('yOffset');\n    return `${setGraphArea}.graphArea(${width}, ${hight}, ${xOffset}, ${yOffset})` + \"\\n\";\n};\n\n","${setGraphArea}.graphArea(${width}, ${hight}, ${xOffset}, ${yOffset})"],"setScale":["window['Blockly'].Python['__graphEditor_setScale'] = function(block) {\n    var setScale = Blockly.Python.valueToCode(block, 'setScale', Blockly.Python.ORDER_NONE);\nvar autoScaleY = block.getFieldValue('autoScaleY');\nvar maxYValue = block.getFieldValue('maxYValue');\nvar minYValue = block.getFieldValue('minYValue');\n    return `${setScale}.graphScale(0,0,${autoScaleY}, ${maxYValue}, ${minYValue})\n` + \"\\n\";\n};\n\n","${setScale}.graphScale(0,0,${autoScaleY}, ${maxYValue}, ${minYValue})\n"],"setLineColor":["window['Blockly'].Python['__graphEditor_setLineColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setLinecolor = block.getFieldValue('setLinecolor');\n    return `${graph}.lineColor = ${setLineColor}` + \"\\n\";\n};\n\n","${graph}.lineColor = ${setLineColor}"],"setBgColor":["window['Blockly'].Python['__graphEditor_setBgColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setBgColor = block.getFieldValue('setBgColor');\n    return `${graph}.bgColor = ${setBgColor}` + \"\\n\";\n};\n\n","${graph}.bgColor = ${setBgColor}"],"setFrameColor":["window['Blockly'].Python['__graphEditor_setFrameColor'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar setFrameColor = block.getFieldValue('setFrameColor');\n    return `${graph}.frameColor = ${setFrameColor}` + \"\\n\";\n};\n\n","${graph}.frameColor = ${setFrameColor}"],"drawFrame":["window['Blockly'].Python['__graphEditor_drawFrame'] = function(block) {\n    var drawFrame = Blockly.Python.valueToCode(block, 'drawFrame', Blockly.Python.ORDER_NONE);\n    return `${drawFrame}.drawFrame()` + \"\\n\";\n};\n\n","${drawFrame}.drawFrame()"],"updateData":["window['Blockly'].Python['__graphEditor_updateData'] = function(block) {\n    var graph = Blockly.Python.valueToCode(block, 'graph', Blockly.Python.ORDER_NONE);\nvar addData = Blockly.Python.valueToCode(block, 'addData', Blockly.Python.ORDER_NONE);\n    return `${graph}.updateSourceData(${addData})` + \"\\n\";\n};\n\n","${graph}.updateSourceData(${addData})"],"drawLineGraph":["window['Blockly'].Python['__graphEditor_drawLineGraph'] = function(block) {\n    var drawLineGraph = Blockly.Python.valueToCode(block, 'drawLineGraph', Blockly.Python.ORDER_NONE);\n    return `${drawLineGraph}.drawLine()` + \"\\n\";\n};\n\n","${drawLineGraph}.drawLine()"],"dataNum":["window['Blockly'].Python['__graphEditor_dataNum'] = function(block) {\n    var dataNum = Blockly.Python.valueToCode(block, 'dataNum', Blockly.Python.ORDER_NONE);\n    return [`${dataNum}.xMax`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","${dataNum}.xMax"]}}