{"category":"SCD30mod","color":"#ff990a","blocks":["__SCD30mod_initSCD30","__SCD30mod_getData","__SCD30mod_CO2","__SCD30mod_temp","__SCD30mod_hum"],"jscode":"// Block __SCD30mod_initSCD30\nvar __SCD30mod_initSCD30_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"initSCD30\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_initSCD30'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_initSCD30_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_initSCD30'] = function(block) {\n        return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n// Block __SCD30mod_getData\nvar __SCD30mod_getData_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"getData\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_getData'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_getData_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_getData'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)` + \"\\n\";\n};\n\n// Block __SCD30mod_CO2\nvar __SCD30mod_CO2_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"CO2\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_CO2'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_CO2_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_CO2'] = function(block) {\n        return [`SCD30Data[0]\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_temp\nvar __SCD30mod_temp_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"temp\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_temp'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_temp_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_temp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_hum\nvar __SCD30mod_hum_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"hum\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_hum'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_hum_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_hum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"initSCD30":["window['Blockly'].Python['__SCD30mod_initSCD30'] = function(block) {\n        return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n","from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n"],"getData":["window['Blockly'].Python['__SCD30mod_getData'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)` + \"\\n\";\n};\n\n","SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)"],"CO2":["window['Blockly'].Python['__SCD30mod_CO2'] = function(block) {\n        return [`SCD30Data[0]\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[0]\n"],"temp":["window['Blockly'].Python['__SCD30mod_temp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[1]"],"hum":["window['Blockly'].Python['__SCD30mod_hum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[2]"]}}