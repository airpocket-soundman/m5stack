{"category":"SCD30mod","color":"#ff990a","blocks":["__SCD30mod_init","__SCD30mod_readData","__SCD30mod_readStatus"],"jscode":"// Block __SCD30mod_init\nvar __SCD30mod_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"init\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SDA_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"SDA_pin\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SCL_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"SCL_pin\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_init'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_init'] = function(block) {\n    var SDA_pin = block.getFieldValue('SDA_pin');\nvar SCL_pin = block.getFieldValue('SCL_pin');\n    return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n// Block __SCD30mod_readData\nvar __SCD30mod_readData_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readData\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readData'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readData_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readData'] = function(block) {\n        return [`scd30.read_measurement()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_readStatus\nvar __SCD30mod_readStatus_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readStatus\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readStatus'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readStatus_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readStatus'] = function(block) {\n        return [`scd30.get_status_ready()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"init":["window['Blockly'].Python['__SCD30mod_init'] = function(block) {\n    var SDA_pin = block.getFieldValue('SDA_pin');\nvar SCL_pin = block.getFieldValue('SCL_pin');\n    return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n","from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n"],"readData":["window['Blockly'].Python['__SCD30mod_readData'] = function(block) {\n        return [`scd30.read_measurement()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","scd30.read_measurement()"],"readStatus":["window['Blockly'].Python['__SCD30mod_readStatus'] = function(block) {\n        return [`scd30.get_status_ready()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","scd30.get_status_ready()"]}}