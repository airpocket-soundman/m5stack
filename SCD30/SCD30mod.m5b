{"category":"SCD30mod","color":"#ff990a","blocks":["__SCD30mod_init","__SCD30mod_read_data","__SCD30mod_read_status","__SCD30mod_data_update","__SCD30mod_read_co2_conc","__SCD30mod_read_temp","__SCD30mod_read_hum"],"jscode":"// Block __SCD30mod_init\nvar __SCD30mod_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"init\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SDA_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 21,\n            \"name\": \"SDA_pin\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SDC_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 22,\n            \"name\": \"SDC_pin\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_init'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_init'] = function(block) {\n    var SDA_pin = block.getFieldValue('SDA_pin');\nvar SDC_pin = block.getFieldValue('SDC_pin');\n    return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n// Block __SCD30mod_read_data\nvar __SCD30mod_read_data_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read_data\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_read_data'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_read_data_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_read_data'] = function(block) {\n        return [`scd30.read_measurement()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_read_status\nvar __SCD30mod_read_status_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read_status\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_read_status'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_read_status_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_read_status'] = function(block) {\n        return [`scd30.get_status_ready()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_data_update\nvar __SCD30mod_data_update_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"data_update\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_data_update'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_data_update_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_data_update'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\n` + \"\\n\";\n};\n\n// Block __SCD30mod_read_co2_conc\nvar __SCD30mod_read_co2_conc_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read_co2_conc\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_read_co2_conc'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_read_co2_conc_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_read_co2_conc'] = function(block) {\n        return [`SCD30Data[0]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_read_temp\nvar __SCD30mod_read_temp_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read_temp\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_read_temp'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_read_temp_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_read_temp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_read_hum\nvar __SCD30mod_read_hum_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read_hum\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_read_hum'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_read_hum_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_read_hum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"init":["window['Blockly'].Python['__SCD30mod_init'] = function(block) {\n    var SDA_pin = block.getFieldValue('SDA_pin');\nvar SDC_pin = block.getFieldValue('SDC_pin');\n    return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n","from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(${SCL_pin}),sda=Pin(${SDA_pin}),freq=100000)\nscd30=SCD30(i2c,0x61)\n"],"read_data":["window['Blockly'].Python['__SCD30mod_read_data'] = function(block) {\n        return [`scd30.read_measurement()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","scd30.read_measurement()"],"read_status":["window['Blockly'].Python['__SCD30mod_read_status'] = function(block) {\n        return [`scd30.get_status_ready()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","scd30.get_status_ready()"],"data_update":["window['Blockly'].Python['__SCD30mod_data_update'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\n` + \"\\n\";\n};\n\n","SCD30Data = scd30.read_measurement()\n"],"read_co2_conc":["window['Blockly'].Python['__SCD30mod_read_co2_conc'] = function(block) {\n        return [`SCD30Data[0]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[0]"],"read_temp":["window['Blockly'].Python['__SCD30mod_read_temp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[1]"],"read_hum":["window['Blockly'].Python['__SCD30mod_read_hum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[2]"]}}
