{"category":"SCD30mod","color":"#ff990a","blocks":["__SCD30mod_init","__SCD30mod_readData","__SCD30mod_readConc","__SCD30mod_readTemp","__SCD30mod_readHum"],"jscode":"// Block __SCD30mod_init\nvar __SCD30mod_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"initSCD30\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_init'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_init'] = function(block) {\n        return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n// Block __SCD30mod_readData\nvar __SCD30mod_readData_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readData\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readData'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readData_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readData'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)` + \"\\n\";\n};\n\n// Block __SCD30mod_readConc\nvar __SCD30mod_readConc_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readConc\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readConc'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readConc_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readConc'] = function(block) {\n        return [`SCD30Data[0]\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_readTemp\nvar __SCD30mod_readTemp_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readTemp\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readTemp'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readTemp_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readTemp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SCD30mod_readHum\nvar __SCD30mod_readHum_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"readHum\"\n        }\n    ],\n    \"colour\": \"#ff990a\"\n};\n\nwindow['Blockly'].Blocks['__SCD30mod_readHum'] = {\n    init: function() {\n        this.jsonInit(__SCD30mod_readHum_json);\n    }\n};\n\nwindow['Blockly'].Python['__SCD30mod_readHum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"init":["window['Blockly'].Python['__SCD30mod_init'] = function(block) {\n        return `from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n` + \"\\n\";\n};\n\n","from machine import I2C,Pin\nimport sys\nsys.path.append('/flash/res')\nfrom scd30 import SCD30\n\ni2c=I2C(scl=Pin(22),sda=Pin(21),freq=100000)\nscd30=SCD30(i2c,0x61)\n"],"readData":["window['Blockly'].Python['__SCD30mod_readData'] = function(block) {\n        return `SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)` + \"\\n\";\n};\n\n","SCD30Data = scd30.read_measurement()\nif str(SCD30Data[0]) == 'nan':\n    SCD30Data =(False,False,False)"],"readConc":["window['Blockly'].Python['__SCD30mod_readConc'] = function(block) {\n        return [`SCD30Data[0]\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[0]\n"],"readTemp":["window['Blockly'].Python['__SCD30mod_readTemp'] = function(block) {\n        return [`SCD30Data[1]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[1]"],"readHum":["window['Blockly'].Python['__SCD30mod_readHum'] = function(block) {\n        return [`SCD30Data[2]`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SCD30Data[2]"]}}