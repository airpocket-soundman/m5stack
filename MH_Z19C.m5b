{"category":"MH_Z19C","color":"#1f935b","blocks":["__MH_Z19C_init","__MH_Z19C_data_update","__MH_Z19C_read_co2_conc","__MH_Z19C_read_temp"],"jscode":"// Block __MH_Z19C_init\nvar __MH_Z19C_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"init\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"TX_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"TX_pin\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"RX_pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"RX_pin\"\n        }\n    ],\n    \"colour\": \"#1f935b\"\n};\n\nwindow['Blockly'].Blocks['__MH_Z19C_init'] = {\n    init: function() {\n        this.jsonInit(__MH_Z19C_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__MH_Z19C_init'] = function(block) {\n    var TX_pin = block.getFieldValue('TX_pin');\nvar RX_pin = block.getFieldValue('RX_pin');\n    return `sys.path.append('/flash/res')\nfrom machine import UART\nfrom mh_z19c import MH_Z19C\nmh_z19c = MH_Z19C(${TX_pin},${RX_pin})` + \"\\n\";\n};\n\n// Block __MH_Z19C_data_update\nvar __MH_Z19C_data_update_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"data_update\"\n        }\n    ],\n    \"colour\": \"#1f935b\"\n};\n\nwindow['Blockly'].Blocks['__MH_Z19C_data_update'] = {\n    init: function() {\n        this.jsonInit(__MH_Z19C_data_update_json);\n    }\n};\n\nwindow['Blockly'].Python['__MH_Z19C_data_update'] = function(block) {\n        return `mh_z19c.read_data()` + \"\\n\";\n};\n\n// Block __MH_Z19C_read_co2_conc\nvar __MH_Z19C_read_co2_conc_json = {\n    \"args0\": [\n        {\n            \"type\": \"label\",\n            \"text\": \"read_co2_conc\",\n            \"name\": \"read_co2_conc\"\n        }\n    ],\n    \"message0\": \"%1\",\n    \"colour\": \"#1f935b\"\n};\n\nwindow['Blockly'].Blocks['__MH_Z19C_read_co2_conc'] = {\n    init: function() {\n        this.jsonInit(__MH_Z19C_read_co2_conc_json);\n    }\n};\n\nwindow['Blockly'].Python['__MH_Z19C_read_co2_conc'] = function(block) {\n        return [`mh_z19c.read_co2_conc()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __MH_Z19C_read_temp\nvar __MH_Z19C_read_temp_json = {\n    \"args0\": [\n        {\n            \"type\": \"label\",\n            \"text\": \"read_temp\",\n            \"name\": \"read_temp\"\n        }\n    ],\n    \"message0\": \"%1\",\n    \"colour\": \"#1f935b\"\n};\n\nwindow['Blockly'].Blocks['__MH_Z19C_read_temp'] = {\n    init: function() {\n        this.jsonInit(__MH_Z19C_read_temp_json);\n    }\n};\n\nwindow['Blockly'].Python['__MH_Z19C_read_temp'] = function(block) {\n        return [`mh_z19c.read_temp()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"init":["window['Blockly'].Python['__MH_Z19C_init'] = function(block) {\n    var TX_pin = block.getFieldValue('TX_pin');\nvar RX_pin = block.getFieldValue('RX_pin');\n    return `sys.path.append('/flash/res')\nfrom machine import UART\nfrom mh_z19c import MH_Z19C\nmh_z19c = MH_Z19C(${TX_pin},${RX_pin})` + \"\\n\";\n};\n\n","sys.path.append('/flash/res')\nfrom machine import UART\nfrom mh_z19c import MH_Z19C\nmh_z19c = MH_Z19C(${TX_pin},${RX_pin})"],"data_update":["window['Blockly'].Python['__MH_Z19C_data_update'] = function(block) {\n        return `mh_z19c.read_data()` + \"\\n\";\n};\n\n","mh_z19c.read_data()"],"read_co2_conc":["window['Blockly'].Python['__MH_Z19C_read_co2_conc'] = function(block) {\n        return [`mh_z19c.read_co2_conc()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","mh_z19c.read_co2_conc()"],"read_temp":["window['Blockly'].Python['__MH_Z19C_read_temp'] = function(block) {\n        return [`mh_z19c.read_temp()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","mh_z19c.read_temp()"]}}